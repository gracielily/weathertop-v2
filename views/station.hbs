{{> menu id="dashboard" isAuthUser=true}}

<!-- Breadcrumbs -->
{{> breadcrumbs navBreadcrumbs=navBreadcrumbs}}
<!-- Main Heading -->
<section class="ui segment">
  <h2 class="ui center aligned icon header blue">
    <i class="circular eye icon"></i>
    {{capitilize station.name}} Overview
  </h2>
</section>
<!-- Reading Nav Link -->
<section class="ui segment">
  <a href="#createStationForm">
    <button class="ui primary button">
      <i class="plus icon"></i>Add New Reading
    </button>
  </a>
</section>
{{#if station.readings}}
  <!-- Readings List -->
  <section class="ui raised segment">
     {{> latestreading station=station}}
     {{> listreadings station=station}}
  </section>
<section class="ui raised segment">
  <h2>
    Weather Trends
  </h2>
  <p>
    Below is a graph representing the historical weather trends for this station.
  </p>
<canvas id="trendsGraph" height="120"></canvas>
</section>
{{else}}
  <!-- No Readings Message -->
  <section class="ui icon blue message">
    <i class="lightbulb icon"></i>
    <div class="content">
      <div class="header">
        No Weather Readings for Station {{capitilize station.name}}
      </div>
      <p>You can create a Reading by filling out the form below.</p>
    </div>
  </section>
{{/if}}
<!-- Create New Reading Form -->
{{> createreading station=station error=error}}

<script>
const ctx = document.getElementById('trendsGraph').getContext('2d');
const station = {{{toJson station}}}
const readings = station.readings;
const options = {
  type: 'line',
  data: {
    datasets: [{
      label: 'Temperature',
      data: readings.map((reading) => {
        return {
          x: new Date(reading.displayTimestamp.dateTime),
          y: reading.windSpeed
        }
      }),
      borderColor: 'rgb(255, 99, 132)',
      backgroundColor: 'rgba(255, 99, 132, .6)',
      pointStyle: 'circle',
      pointRadius: 5,
      pointHoverRadius: 7
    },
    {
      label: 'Wind',
      data: readings.map((reading) => {
        return {
        x: new Date(reading.displayTimestamp.dateTime),
        y: reading.temperature
        }
      }),
      borderColor: 'rgb(54, 162, 235)',
      backgroundColor: 'rgba(54, 162, 235, .6)',
      pointStyle: 'circle',
      pointRadius: 5,
      pointHoverRadius: 7
    },
    {
      label: 'Pressure',
      data: readings.map((reading) => {
        return {
        x: new Date(reading.displayTimestamp.dateTime),
        y: reading.pressure
        }
      }),
      borderColor: 'rgb(153, 102, 255)',
      backgroundColor: 'rgba(153, 102, 255, .6)',
      pointStyle: 'circle',
      pointRadius: 5,
      pointHoverRadius: 7
    }]
  },
  options: {
    scales: {
      x: {
        type: 'timeseries',
        time: {
          unit: 'week'
        },
         ticks: {
          autoSkip: false,
           source: 'data',
        },
      },
    }
  }
}
  
const trendGraph = new Chart(ctx, options);
  console.log(station)
</script>
