{{> menu isAuthUser=true}}

<!-- Breadcrumbs -->
{{> breadcrumbs navBreadcrumbs=navBreadcrumbs}}
<!-- Main Heading -->
<section class="ui segment">
  <h2 class="ui center aligned icon header blue">
    <i class="circular eye icon"></i>
    {{capitilize station.name}} Station Overview
  </h2>
</section>
{{#if error}}
  {{> displayerror error=error }}
{{/if}}
<!-- Reading Nav Link -->
<section class="ui segment">
  <a href="#createReadingForm">
    <button class="ui primary button">
      <i class="plus icon"></i>Add New Reading
    </button>
  </a>
  {{#if station.readings}}
    <button onclick="deleteAllReadings()" class="right floated ui red button">
      <i class="fire icon"></i>Delete All Readings
    </button>
  {{/if}}
</section>
<!-- Station Map -->
<section class="ui segment">
  <div id="map"></div>
</section>
{{#if station.readings}}
  <!-- Readings List -->
  <section class="ui raised segment">
     {{> latestreading station=station}}
     {{> listreadings station=station}}
  </section>
<!-- Readings Graph -->
<section class="ui raised segment">
  <h2>
    Weather Trends
  </h2>
  <p>
    Below is a graph representing the historical weather trends for this station.
  </p>
<canvas id="trendsGraph" height="120"></canvas>
</section>
{{else}}
  <!-- No Readings Message -->
  <section class="ui icon blue message">
    <i class="lightbulb icon"></i>
    <div class="content">
      <div class="header">
        No Weather Readings for {{capitilize station.name}} Station
      </div>
      <p>You can create a Reading by filling out the form below.</p>
    </div>
  </section>
{{/if}}
<!-- Create New Reading Form -->
{{> createreading station=station}}

<script>
  const station = {{{toJson station}}}
  const readings = station.readings;
  
  function deleteAllReadings() {
  const proceed = confirm("This will delete ALL Readings for " + station.name + " Station. Are you sure you wish to proceed?");
    if(proceed){
      location.href = location.href += "/delete-all-readings"
    };
  }
  
    // set up the station map
  const map = L.map('map', {dragging: false, doubleClickZoom: false, zoomControl: false, scrollWheelZoom: false}).setView([station.latitude, station.longitude], 13)
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: 'Â© OpenStreetMap'
  }).addTo(map);

  const marker = L.marker([station.latitude, station.longitude]).addTo(map);
  
  // set up the readings chart
  if(readings.length) {
    const ctx = document.getElementById('trendsGraph').getContext('2d');

    const options = {
      type: 'line',
      data: {
        datasets: [
          {
            label: 'Temperature',
            data: readings.map((reading) => {
              return {
                x: new Date(reading.displayTimestamp.dateTime),
                y: reading.temperature
              }
            }),
            borderColor: 'rgb(255, 99, 132)',
            backgroundColor: 'rgba(255, 99, 132, .6)',
            pointStyle: 'circle',
            pointRadius: 5,
            pointHoverRadius: 7
        },
        {
          label: 'Wind',
          data: readings.map((reading) => {
            return {
            x: new Date(reading.displayTimestamp.dateTime),
            y: reading.windSpeed
            }
          }),
          borderColor: 'rgb(54, 162, 235)',
          backgroundColor: 'rgba(54, 162, 235, .6)',
          pointStyle: 'circle',
          pointRadius: 5,
          pointHoverRadius: 7
        },
        {
          label: 'Pressure',
          data: readings.map((reading) => {
            return {
            x: new Date(reading.displayTimestamp.dateTime),
            y: reading.pressure
            }
          }),
          borderColor: 'rgb(153, 102, 255)',
          backgroundColor: 'rgba(153, 102, 255, .6)',
          pointStyle: 'circle',
          pointRadius: 5,
          pointHoverRadius: 7
        }]
      },
      options: {
        scales: {
          x: {
            type: 'timeseries',
            time: {
              unit: 'week'
            },
             ticks: {
              autoSkip: false,
               source: 'data',
            },
          },
        }
      }
    }
  
    const trendGraph = new Chart(ctx, options);
    
  }

</script>
